package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/gin-gonic/gin/binding"

	"go-cygnus/apis"
	"go-cygnus/clients"
	"go-cygnus/models"
	"go-cygnus/utils/db"
	"go-cygnus/utils/logging"
	"go-cygnus/utils/validators"

	// docs is generated by Swag CLI, you have to import it.
	_ "go-cygnus/docs"
)

var (
	Version   string
	GoVersion string
	webServer bool
)

func init() {
	flag.BoolVar(&webServer, "webServer", true, "start web server")
}

// @title Captain API Documents
// @version 1.0
// @BasePath /v1
func main() {
	flag.Parse()
	printBanner()

	// Initialize
	defer logging.Finalize()

	// redis init

	// gorm migration
	db.Init()
	models.SyncDB()

	// module init
	clients.Init()
	clients.SetLogger(logging.GetLogger("restclient").WithContext(context.Background()))

	// system configs
	//utils.SystemInit()
	//kafka.InitSharedProducer()

	// k8s init and
	//k8s.Init()

	// Sentry
	// To initialize Sentry's handler, you need to initialize Sentry itself beforehand
	//monitor.SentryInit()

	// Web server
	if webServer {
		apis.WebAPIServer.Run(":8080")
	}

	// Upgrade validator from v8 to v9 globally
	binding.Validator = new(validators.DefaultValidator)

	// Task runner

	// run forever & shutdown part
	// Create a channel to receive notifications as go
	// signal notification works by sending `os.Signal`
	// values on a channel
	quit := make(chan os.Signal, 1)

	// `signal.Notify` registers the given channel to
	// receive notifications of the specified signals.
	signal.Notify(quit, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)

	sig := <-quit
	logging.GetLogger("root").Infof("receive %s signal, quiting...", sig)

	// The program will wait here until it gets the
	// expected signal and then gracefully shutdown
	// server.
	if webServer {
		ctxWeb := apis.WebAPIServer.Shutdown()
		<-ctxWeb.Done()
	}
}

func printBanner() {
	const BANNER = `
   _____ __     __  _______   __    __   __    __   _______
  / ____|\ \   / / / ______| |   \ |  | |  |  |  | / ______|
 | |      \ \_/ /  | |  ___  |    \|  | |  |  |  | | |_____
 | |       \   /   | | |__ \ |  |\    | |  |  |  | \_____  \
 | |____    | |    | |___| | |  | \   | |  \__/  |  _____| |
  \_____/   |_|    \_______/ |__|  \__|  \______/  |_______/

  An expand go web framework
  Version: %s
  Go: %s
`

	l := logging.GetLogger("root")
	if _, err := fmt.Fprintf(l.Logger.Out, BANNER, Version, GoVersion); err != nil {
		l.Infof("Print banner error")
	}
}
